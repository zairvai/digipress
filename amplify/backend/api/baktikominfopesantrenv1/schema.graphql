type Access @aws_iam
@aws_cognito_user_pools{
	accountId: ID!
	role: UserRole!
	createdBy: String
	updatedBy: String
	createdAt: String
	updatedAt: String
	status: Int
}

input AccessInputType {
	accountId: ID!
	role: UserRole!
	createdBy: String
	updatedBy: String
	createdAt: String
	updatedAt: String
	status: Int
}

type Account @aws_iam
@aws_cognito_user_pools {
	id: ID!
	name: String!
	uniqueURL: String!
	address: String!
	contactPerson: String!
	emailAddress: AWSEmail!
	phoneNumber: String!
	status: Int
	createdBy: User
	updatedBy: User
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
	version: Int!
}

type AccountConnection {
	items: [Account]
	foundDocs: Int
}

type TagConnection {
	items: [Tag]
	foundDocs: Int
}

type CategoryConnection {
	items: [Category]
	foundDocs: Int
}

input CreateAccountInput {
	name: String!
	uniqueURL: String!
	address: String!
	contactPerson: String!
	emailAddress: AWSEmail!
	phoneNumber: String!
}

input CreateUserInput {
	name: String!
	phoneCode: String!
	phoneNumber: String!
	emailAddress: AWSEmail!
	password: String
	role:AccessInputType!

}

input DeleteItemInput {
	id: ID!
}

input GetItemInput {
	id: ID!
}

input ListItemInput {
	accountId: ID
	roles: [UserRole]
	orderBy: String
	direction: String
	from: Int
	size: Int
}

type Mutation {
	createUser(input: CreateUserInput!): User
	updateUser(input: UpdateUserInput!): User
	deleteUser(input: DeleteItemInput!): User
	createAccount(input: CreateAccountInput!): Account
	updateAccount(input: UpdateAccountInput!): Account
	deleteAccount(input: DeleteItemInput!): Account

	createTag(input:CreateTagInput!):Tag
	updateTag(input:UpdateTagInput!):Tag
	deleteTag(input:DeleteItemInput!):Tag

	createCategory(input:CreateCategoryInput!):Category
	updateCategory(input:UpdateCategoryInput!):Category
	deleteCategory(input:DeleteItemInput!):Category
}

type Query {
	getAccount(input: GetItemInput!): Account
	listAccounts(input: ListItemInput): AccountConnection
	getAccountByUniqueUrl(url: String!): Account @aws_iam @aws_cognito_user_pools

	getUser(input: GetItemInput!): User
	getUserByEmailAddress(emailAddress: String!): User
	listUsers(input: ListItemInput): UserConnection

	getTag(input:GetItemInput!):Tag
	listTags(input:ListItemInput):TagConnection

	getCategory(input:GetItemInput!):Category
	listCategories(input:ListItemInput):CategoryConnection
}

input UpdateAccountInput {
	id: ID!
	name: String
	uniqueURL: String
	address: String
	contactPerson: String
	emailAddress: AWSEmail
	phoneNumber: String
	status: Int
	expectedVersion: Int
}

input UpdateUserInput {
	id: ID!
	name: String
	emailAddress: AWSEmail
	phoneCode: String
	phoneNumber: String
	roles: [AccessInputType]
	status: Int
	expectedVersion: Int!
}

type User @aws_iam
@aws_cognito_user_pools {
	id: ID!
	name: String!
	emailAddress: AWSEmail!
	phoneNumber: String
	emailAddressVerified: Boolean
	phoneNumberVerified: Boolean
	enabled: Boolean
	roles: [Access]
	createdBy: User
	updatedBy: User
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
	version: Int!
	status: Int
}

type UserConnection {
	items: [User]
	foundDocs: Int
}

enum UserRole {
	owner
	admin
	tutor
	student
	member
}

type Tag @aws_iam
@aws_cognito_user_pools{
	id:ID!
	accountId:ID!
	name:String!
	createdBy: User
	updatedBy: User
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
	version: Int!
	status: Int
}

input CreateTagInput {
	accountId:ID!
	name:String!
}
input UpdateTagInput {
	name:String
	status:Int
	expectedVersion:Int!
}

type Category @aws_iam
@aws_cognito_user_pools{
	id:ID!
	accountId:ID!
	name:String!
	desc:String
	createdBy: User
	updatedBy: User
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
	version: Int!
	status: Int
}

input CreateCategoryInput {
	accountId:ID!
	name:String!
	desc:String
}

input UpdateCategoryInput {
	name:String
	desc:String
	status:Int
	expectedVersion:Int!
}