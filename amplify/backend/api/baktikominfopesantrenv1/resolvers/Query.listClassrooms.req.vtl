#**
The value of 'payload' after the template has been evaluated
will be passed as the event to AWS Lambda.
*#

#set($statuses=$util.defaultIfNull($ctx.args.input.statuses,[1,2,3,4]))
#set($size=$util.defaultIfNull($ctx.args.input.size, 20))
#set($from=$util.defaultIfNull($ctx.args.input.from, 0))

#set($query={
  "bool": {
    "must": [
      {
        "terms": {
          "status.keyword": $statuses
        }
      }
    ]
  }
})

##set ids
#if(!$util.isNull($ctx.args.input.ids))

  #set($ids={
    "terms": {
      "id.keyword": $ctx.args.input.ids
    }
  })
  $util.qr($query.bool.must.add($ids))
  
#end

##set match accountid
#if(!$util.isNull($ctx.args.input.accountId))
  #set($match={
    "match": {"accountId": $ctx.args.input.accountId}
  })
  $util.qr($query.bool.must.add($match))
#end

##set match name prefix
#if(!$util.isNull($ctx.args.input.title))
  #set($matchNamePrefix = {
    "match_phrase_prefix": {
        "title": {
            "query": $ctx.args.input.title
          }
      }
  })

  $util.qr($query.bool.must.add($matchNamePrefix))

#end

##set order
#if(!$util.isNull($ctx.args.input.orderBy))
  #set($sort=[
    {
      "${ctx.args.input.orderBy}": {
        "order": $ctx.args.input.direction
      }
    }
  ])
#else
	#set($sort=[])
#end


{
  "version" : "2017-02-28",
  "operation": "Invoke",
  "payload": {
  	"field":"get",
    "arguments":{
      "path":"/classroom/_search",
      "body":{
          "_source":{
              "includes":"id"
          },
          "size":$size,
          "from":$from,
          "query":$util.toJson($query),
          "sort":$util.toJson($sort)

      }
    }
  }
}