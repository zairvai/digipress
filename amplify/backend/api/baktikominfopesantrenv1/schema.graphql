type Account {
	id: ID!
	name: String!
	uniqueURL: String!
	address: String!
	contactPerson: String!
	emailAddress: AWSEmail!
	phoneNumber: String!
	status: Int
	createdBy: User
	updatedBy: User
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
	version: Int!
}

input CreateAccountInput {
	name: String!
	uniqueURL: String!
	address: String!
	contactPerson: String!
	emailAddress: AWSEmail!
	phoneNumber: String!
}

input DeleteItemInput {
	id: ID!
}

input GetItemInput {
	id: ID!
}

input CreateUserInput {
	name:String!
	phoneNumber:String!
	emailAddress:AWSEmail!
	password:String
	accountId: ID!
	role: UserRole!
}

input UpdateUserInput {
	id: ID!
	name: String
	emailAddress: AWSEmail
	phoneNumber: String
	password:String
	status: Int
	expectedVersion: Int!
}

type Mutation {

	createUser(input: CreateUserInput!): User
	updateUser(input:UpdateUserInput!):User
	deleteUser(input:DeleteItemInput!):User

	createAccount(input: CreateAccountInput!): Account
	updateAccount(input: UpdateAccountInput!): Account
	deleteAccount(input: DeleteItemInput!): Account

}

type Query {
	getAccount(input: GetItemInput!): Account
	listAccounts(input:ListItemInput):AccountConnection
	getAccountByUniqueUrl(url:String!):Account

	getUser(input:GetItemInput!):User
	listUsers(input:ListItemInput):UserConnection
}

type AccountConnection{
	items:[Account]
	foundDocs:Int
}

type UserConnection{
	items:[User]
	foundDocs:Int
}

input ListItemInput {
	orderBy: String
	direction: String
	from:Int
	size:Int
}

input UpdateAccountInput {
	id: ID!
	name: String
	uniqueURL: String
	address: String
	contactPerson: String
	emailAddress: AWSEmail
	phoneNumber: String
	status: Int
	expectedVersion: Int
}

type User {
	id: ID!
	name: String!
	emailAddress: AWSEmail!
	phoneNumber: String
	emailAddressVerified: Boolean
	phoneNumberVerified: Boolean
	enabled:Boolean
	roles: AWSJSON
	createdBy: User
	updatedBy: User
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
	version: Int!
}

enum UserRole {
	Owner
	Admin
	Tutor
	Student
	Member
}