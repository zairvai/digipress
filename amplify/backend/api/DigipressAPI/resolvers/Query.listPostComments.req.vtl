#**
The value of 'payload' after the template has been evaluated
will be passed as the event to AWS Lambda.
*#

#set($statuses=$util.defaultIfNull($ctx.args.input.statuses,[1,2,3,4]))
#set($size=$util.defaultIfNull($ctx.args.input.size, 20))
## #set($from=$util.defaultIfNull($ctx.args.input.from, 0))

#set($query={
  "bool": {
    "must": [
      {
        "terms": {
          "status.keyword": $statuses
        }
      },
      {"match": {
          "__typename": "Comment"
        }}
    ]
  }
})

##set match accountid
#if(!$util.isNull($ctx.args.input.accountId))
  #set($match={
    "match": {"accountId": $ctx.args.input.accountId}
  })
  $util.qr($query.bool.must.add($match))
#end

##set match articleid
#if(!$util.isNull($ctx.args.input.postId))
  #set($match={
    "match": {"postId": $ctx.args.input.postId}
  })
  $util.qr($query.bool.must.add($match))
#end

##set match replyToId
#if($util.isNull($ctx.args.input.replyToId))
	#set($term={
      "term": {
        "isReply": {
          "value": false
        }}
    })
    $util.qr($query.bool.must.add($term))
#else
	#set($match={
      "match": {"replyToId": $ctx.args.input.replyToId }
    })
    $util.qr($query.bool.must.add($match))
#end

#set($dateRange={
  "range":{
    "createdAt":{}
  }
})

#if(!$util.isNull($ctx.args.input.minDate) || !$util.isNull($ctx.args.input.maxDate))

  #if(!$util.isNull($ctx.args.input.minDate))
    $util.qr($dateRange.range.createdAt.put("gt",$ctx.args.input.minDate))
  #end

  #if(!$util.isNull($ctx.args.input.maxDate))
    $util.qr($dateRange.range.createdAt.put("lt",$ctx.args.input.maxDate))
  #end
  $util.qr($query.bool.must.add($dateRange))
  
#end

##set order
#if(!$util.isNull($ctx.args.input.orderBy))
  #set($sort=[
    {
      "${ctx.args.input.orderBy}": {
        "order": $util.defaultIfNull($ctx.args.input.direction,"asc")
      }
    }
  ])
#else
	#set($sort=[])
#end

#set($body={
  "_source" : {"includes":"id"},
  "size" : $size,
  "query" : $query,
  "sort" : $sort
})

#if(!$util.isNull($ctx.args.input.from))
  $util.qr($body.put("from",$ctx.args.input.from))
#end

{
  "version" : "2017-02-28",
  "operation": "Invoke",
  "payload": {
  	"field":"get",
    "arguments":{
      "path":"/records/_search",
      "body": $util.toJson($body)
    }
  }
}