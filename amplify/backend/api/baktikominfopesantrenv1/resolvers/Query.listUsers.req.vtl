#**
The value of 'payload' after the template has been evaluated
will be passed as the event to AWS Lambda.
*#

#set($size=$util.defaultIfNull($ctx.args.input.size, 20))
#set($from=$util.defaultIfNull($ctx.args.input.from, 0))

#set($roles=$util.defaultIfNull($ctx.args.input.roles, []))

#set($accountId=$ctx.args.input.accountId)

#if(!$util.isNull($ctx.args.input.orderBy))
  #set($sort=[
    {
      "${ctx.args.input.orderBy}": {
        "order": $ctx.args.input.direction
      }
    }
  ])
#else
	#set($sort=[])
#end

#set($query={
  "bool": {
      "must": [
        {
          "nested": {
            "path": "roles",
            "query": {
              "bool": {
                "must": [
                  {"match":{"roles.accountId": $accountId}},
                  {
                    "terms": {
                      "roles.role": $roles
                    }
                  }
                ]
              }
            }
          }
        }
      ]
  }
})


#if(!$util.isNull($ctx.args.input.role))
	#set($matchRole={
    "match":{"roles.role": $ctx.args.input.role }
  })	
      
  $util.qr($query.bool.must[0].nested.query.bool.must.add($matchRole))
      
#end

## $util.error($util.toJson($query))

{
  "version" : "2017-02-28",
  "operation": "Invoke",
  "payload": {
  	"field":"get",
    "arguments":{
      "path":"/user/_search",
      "body":{
          "_source":{
              "includes":"id"
          },
          "size":$size,
          "from":$from,
          "query":$util.toJson($query),
          "sort":$util.toJson($sort)

      }
    }
  }
}